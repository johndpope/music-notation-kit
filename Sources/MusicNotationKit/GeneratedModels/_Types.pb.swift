/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: _Types.proto
 *
 */

import Foundation
import SwiftProtobuf


enum _KeyType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case undefKey // = 0
  case major // = 1
  case minor // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .undefKey
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .undefKey
    case 1: self = .major
    case 2: self = .minor
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  init?(name: String) {
    switch name {
    case "undefKey": self = .undefKey
    case "major": self = .major
    case "minor": self = .minor
    default: return nil
    }
  }

  init?(jsonName: String) {
    switch jsonName {
    case "UNDEF_KEY": self = .undefKey
    case "MAJOR": self = .major
    case "MINOR": self = .minor
    default: return nil
    }
  }

  init?(protoName: String) {
    switch protoName {
    case "UNDEF_KEY": self = .undefKey
    case "MAJOR": self = .major
    case "MINOR": self = .minor
    default: return nil
    }
  }

  var rawValue: Int {
    get {
      switch self {
      case .undefKey: return 0
      case .major: return 1
      case .minor: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  var json: String {
    get {
      switch self {
      case .undefKey: return "\"UNDEF_KEY\""
      case .major: return "\"MAJOR\""
      case .minor: return "\"MINOR\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  var hashValue: Int { return rawValue }

  var debugDescription: String {
    get {
      switch self {
      case .undefKey: return ".undefKey"
      case .major: return ".major"
      case .minor: return ".minor"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

enum _NoteLetter: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case undefNote // = 0
  case c // = 1
  case d // = 2
  case e // = 3
  case f // = 4
  case g // = 5
  case a // = 6
  case b // = 7
  case UNRECOGNIZED(Int)

  init() {
    self = .undefNote
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .undefNote
    case 1: self = .c
    case 2: self = .d
    case 3: self = .e
    case 4: self = .f
    case 5: self = .g
    case 6: self = .a
    case 7: self = .b
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  init?(name: String) {
    switch name {
    case "undefNote": self = .undefNote
    case "c": self = .c
    case "d": self = .d
    case "e": self = .e
    case "f": self = .f
    case "g": self = .g
    case "a": self = .a
    case "b": self = .b
    default: return nil
    }
  }

  init?(jsonName: String) {
    switch jsonName {
    case "UNDEF_NOTE": self = .undefNote
    case "C": self = .c
    case "D": self = .d
    case "E": self = .e
    case "F": self = .f
    case "G": self = .g
    case "A": self = .a
    case "B": self = .b
    default: return nil
    }
  }

  init?(protoName: String) {
    switch protoName {
    case "UNDEF_NOTE": self = .undefNote
    case "C": self = .c
    case "D": self = .d
    case "E": self = .e
    case "F": self = .f
    case "G": self = .g
    case "A": self = .a
    case "B": self = .b
    default: return nil
    }
  }

  var rawValue: Int {
    get {
      switch self {
      case .undefNote: return 0
      case .c: return 1
      case .d: return 2
      case .e: return 3
      case .f: return 4
      case .g: return 5
      case .a: return 6
      case .b: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  var json: String {
    get {
      switch self {
      case .undefNote: return "\"UNDEF_NOTE\""
      case .c: return "\"C\""
      case .d: return "\"D\""
      case .e: return "\"E\""
      case .f: return "\"F\""
      case .g: return "\"G\""
      case .a: return "\"A\""
      case .b: return "\"B\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  var hashValue: Int { return rawValue }

  var debugDescription: String {
    get {
      switch self {
      case .undefNote: return ".undefNote"
      case .c: return ".c"
      case .d: return ".d"
      case .e: return ".e"
      case .f: return ".f"
      case .g: return ".g"
      case .a: return ".a"
      case .b: return ".b"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

enum _Instrument: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case guitar6 // = 0
  case drums // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .guitar6
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .guitar6
    case 1: self = .drums
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  init?(name: String) {
    switch name {
    case "guitar6": self = .guitar6
    case "drums": self = .drums
    default: return nil
    }
  }

  init?(jsonName: String) {
    switch jsonName {
    case "GUITAR6": self = .guitar6
    case "DRUMS": self = .drums
    default: return nil
    }
  }

  init?(protoName: String) {
    switch protoName {
    case "GUITAR6": self = .guitar6
    case "DRUMS": self = .drums
    default: return nil
    }
  }

  var rawValue: Int {
    get {
      switch self {
      case .guitar6: return 0
      case .drums: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  var json: String {
    get {
      switch self {
      case .guitar6: return "\"GUITAR6\""
      case .drums: return "\"DRUMS\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  var hashValue: Int { return rawValue }

  var debugDescription: String {
    get {
      switch self {
      case .guitar6: return ".guitar6"
      case .drums: return ".drums"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

enum _Accidental: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case undefAccidental // = 0
  case sharp // = 1
  case doubleSharp // = 2
  case flat // = 3
  case doubleFlat // = 4
  case natural // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .undefAccidental
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .undefAccidental
    case 1: self = .sharp
    case 2: self = .doubleSharp
    case 3: self = .flat
    case 4: self = .doubleFlat
    case 5: self = .natural
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  init?(name: String) {
    switch name {
    case "undefAccidental": self = .undefAccidental
    case "sharp": self = .sharp
    case "doubleSharp": self = .doubleSharp
    case "flat": self = .flat
    case "doubleFlat": self = .doubleFlat
    case "natural": self = .natural
    default: return nil
    }
  }

  init?(jsonName: String) {
    switch jsonName {
    case "UNDEF_ACCIDENTAL": self = .undefAccidental
    case "SHARP": self = .sharp
    case "DOUBLE_SHARP": self = .doubleSharp
    case "FLAT": self = .flat
    case "DOUBLE_FLAT": self = .doubleFlat
    case "NATURAL": self = .natural
    default: return nil
    }
  }

  init?(protoName: String) {
    switch protoName {
    case "UNDEF_ACCIDENTAL": self = .undefAccidental
    case "SHARP": self = .sharp
    case "DOUBLE_SHARP": self = .doubleSharp
    case "FLAT": self = .flat
    case "DOUBLE_FLAT": self = .doubleFlat
    case "NATURAL": self = .natural
    default: return nil
    }
  }

  var rawValue: Int {
    get {
      switch self {
      case .undefAccidental: return 0
      case .sharp: return 1
      case .doubleSharp: return 2
      case .flat: return 3
      case .doubleFlat: return 4
      case .natural: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  var json: String {
    get {
      switch self {
      case .undefAccidental: return "\"UNDEF_ACCIDENTAL\""
      case .sharp: return "\"SHARP\""
      case .doubleSharp: return "\"DOUBLE_SHARP\""
      case .flat: return "\"FLAT\""
      case .doubleFlat: return "\"DOUBLE_FLAT\""
      case .natural: return "\"NATURAL\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  var hashValue: Int { return rawValue }

  var debugDescription: String {
    get {
      switch self {
      case .undefAccidental: return ".undefAccidental"
      case .sharp: return ".sharp"
      case .doubleSharp: return ".doubleSharp"
      case .flat: return ".flat"
      case .doubleFlat: return ".doubleFlat"
      case .natural: return ".natural"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

enum _Octave: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case 0 // = 0
  case 1 // = 1
  case 2 // = 2
  case 3 // = 3
  case 4 // = 4
  case 5 // = 5
  case 6 // = 6
  case 7 // = 7
  case 8 // = 8
  case 9 // = 9
  case UNRECOGNIZED(Int)

  init() {
    self = .0
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .0
    case 1: self = .1
    case 2: self = .2
    case 3: self = .3
    case 4: self = .4
    case 5: self = .5
    case 6: self = .6
    case 7: self = .7
    case 8: self = .8
    case 9: self = .9
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  init?(name: String) {
    switch name {
    case "0": self = .0
    case "1": self = .1
    case "2": self = .2
    case "3": self = .3
    case "4": self = .4
    case "5": self = .5
    case "6": self = .6
    case "7": self = .7
    case "8": self = .8
    case "9": self = .9
    default: return nil
    }
  }

  init?(jsonName: String) {
    switch jsonName {
    case "OCTAVE0": self = .0
    case "OCTAVE1": self = .1
    case "OCTAVE2": self = .2
    case "OCTAVE3": self = .3
    case "OCTAVE4": self = .4
    case "OCTAVE5": self = .5
    case "OCTAVE6": self = .6
    case "OCTAVE7": self = .7
    case "OCTAVE8": self = .8
    case "OCTAVE9": self = .9
    default: return nil
    }
  }

  init?(protoName: String) {
    switch protoName {
    case "OCTAVE0": self = .0
    case "OCTAVE1": self = .1
    case "OCTAVE2": self = .2
    case "OCTAVE3": self = .3
    case "OCTAVE4": self = .4
    case "OCTAVE5": self = .5
    case "OCTAVE6": self = .6
    case "OCTAVE7": self = .7
    case "OCTAVE8": self = .8
    case "OCTAVE9": self = .9
    default: return nil
    }
  }

  var rawValue: Int {
    get {
      switch self {
      case .0: return 0
      case .1: return 1
      case .2: return 2
      case .3: return 3
      case .4: return 4
      case .5: return 5
      case .6: return 6
      case .7: return 7
      case .8: return 8
      case .9: return 9
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  var json: String {
    get {
      switch self {
      case .0: return "\"OCTAVE0\""
      case .1: return "\"OCTAVE1\""
      case .2: return "\"OCTAVE2\""
      case .3: return "\"OCTAVE3\""
      case .4: return "\"OCTAVE4\""
      case .5: return "\"OCTAVE5\""
      case .6: return "\"OCTAVE6\""
      case .7: return "\"OCTAVE7\""
      case .8: return "\"OCTAVE8\""
      case .9: return "\"OCTAVE9\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  var hashValue: Int { return rawValue }

  var debugDescription: String {
    get {
      switch self {
      case .0: return ".0"
      case .1: return ".1"
      case .2: return ".2"
      case .3: return ".3"
      case .4: return ".4"
      case .5: return ".5"
      case .6: return ".6"
      case .7: return ".7"
      case .8: return ".8"
      case .9: return ".9"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

enum _Tie: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case begin // = 0
  case end // = 1
  case beginAndEnd // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .begin
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .begin
    case 1: self = .end
    case 2: self = .beginAndEnd
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  init?(name: String) {
    switch name {
    case "begin": self = .begin
    case "end": self = .end
    case "beginAndEnd": self = .beginAndEnd
    default: return nil
    }
  }

  init?(jsonName: String) {
    switch jsonName {
    case "BEGIN": self = .begin
    case "END": self = .end
    case "BEGIN_AND_END": self = .beginAndEnd
    default: return nil
    }
  }

  init?(protoName: String) {
    switch protoName {
    case "BEGIN": self = .begin
    case "END": self = .end
    case "BEGIN_AND_END": self = .beginAndEnd
    default: return nil
    }
  }

  var rawValue: Int {
    get {
      switch self {
      case .begin: return 0
      case .end: return 1
      case .beginAndEnd: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  var json: String {
    get {
      switch self {
      case .begin: return "\"BEGIN\""
      case .end: return "\"END\""
      case .beginAndEnd: return "\"BEGIN_AND_END\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  var hashValue: Int { return rawValue }

  var debugDescription: String {
    get {
      switch self {
      case .begin: return ".begin"
      case .end: return ".end"
      case .beginAndEnd: return ".beginAndEnd"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}
