/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: _Staff.proto
 *
 */

import Foundation
import SwiftProtobuf


struct _Staff: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "_Staff"}
  public var protoMessageName: String {return "Staff"}
  public var protoPackageName: String {return "_"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "clef", swift: "clef"),
    2: .same(proto: "instrument", swift: "instrument"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = _Staff
    var _clef: _Clef? = nil
    var _instrument: _Instrument = _Instrument.guitar6

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: _Clef.self, value: &_clef)
      case 2: try setter.decodeSingularField(fieldType: _Instrument.self, value: &_instrument)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _clef {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1)
      }
      if _instrument != _Instrument.guitar6 {
        try visitor.visitSingularField(fieldType: _Instrument.self, value: _instrument, protoFieldNumber: 2)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _clef != other._clef {return false}
      if _instrument != other._instrument {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._clef = _clef
      clone._instrument = _instrument
      return clone
    }
  }

  private var _storage = _StorageClass()


  var clef: _Clef {
    get {return _storage._clef ?? _Clef()}
    set {_uniqueStorage()._clef = newValue}
  }
  public var hasClef: Bool {
    return _storage._clef != nil
  }
  public mutating func clearClef() {
    return _storage._clef = nil
  }

  ///   TODO add NotesHolder, which should implement one_of{Measure|RepeatedMeasure?}.
  var instrument: _Instrument {
    get {return _storage._instrument}
    set {_uniqueStorage()._instrument = newValue}
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: _Staff) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}
