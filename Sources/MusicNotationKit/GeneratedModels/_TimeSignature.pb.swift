/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: _TimeSignature.proto
 *
 */

import Foundation
import SwiftProtobuf


struct _TimeSignature: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "_TimeSignature"}
  public var protoMessageName: String {return "TimeSignature"}
  public var protoPackageName: String {return "_"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "top_number", json: "topNumber", swift: "topNumber"),
    2: .unique(proto: "bottom_number", json: "bottomNumber", swift: "bottomNumber"),
    3: .same(proto: "tempo", swift: "tempo"),
  ]


  var topNumber: Int64 = 0

  var bottomNumber: Int64 = 0

  var tempo: Int64 = 0

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &topNumber)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &bottomNumber)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &tempo)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if topNumber != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: topNumber, protoFieldNumber: 1)
    }
    if bottomNumber != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: bottomNumber, protoFieldNumber: 2)
    }
    if tempo != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: tempo, protoFieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: _TimeSignature) -> Bool {
    if topNumber != other.topNumber {return false}
    if bottomNumber != other.bottomNumber {return false}
    if tempo != other.tempo {return false}
    return true
  }
}
