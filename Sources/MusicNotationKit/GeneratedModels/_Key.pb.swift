/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: _Key.proto
 *
 */

import Foundation
import SwiftProtobuf


struct _Key: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "_Key"}
  public var protoMessageName: String {return "Key"}
  public var protoPackageName: String {return "_"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "type", swift: "type"),
    2: .unique(proto: "note_letter", json: "noteLetter", swift: "noteLetter"),
    3: .same(proto: "accidental", swift: "accidental"),
  ]


  var type: _KeyType = _KeyType.undefKey

  var noteLetter: _NoteLetter = _NoteLetter.undefNote

  var accidental: _Accidental = _Accidental.undefAccidental

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: _KeyType.self, value: &type)
    case 2: try setter.decodeSingularField(fieldType: _NoteLetter.self, value: &noteLetter)
    case 3: try setter.decodeSingularField(fieldType: _Accidental.self, value: &accidental)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if type != _KeyType.undefKey {
      try visitor.visitSingularField(fieldType: _KeyType.self, value: type, protoFieldNumber: 1)
    }
    if noteLetter != _NoteLetter.undefNote {
      try visitor.visitSingularField(fieldType: _NoteLetter.self, value: noteLetter, protoFieldNumber: 2)
    }
    if accidental != _Accidental.undefAccidental {
      try visitor.visitSingularField(fieldType: _Accidental.self, value: accidental, protoFieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: _Key) -> Bool {
    if type != other.type {return false}
    if noteLetter != other.noteLetter {return false}
    if accidental != other.accidental {return false}
    return true
  }
}
