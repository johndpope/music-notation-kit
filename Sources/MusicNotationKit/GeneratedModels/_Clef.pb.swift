/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: _Clef.proto
 *
 */

import Foundation
import SwiftProtobuf


struct _Clef: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "_Clef"}
  public var protoMessageName: String {return "Clef"}
  public var protoPackageName: String {return "_"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "tone", swift: "tone"),
    2: .same(proto: "location", swift: "location"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = _Clef
    var _tone: _Tone? = nil
    var _location: _StaffLocation? = nil

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: _Tone.self, value: &_tone)
      case 2: try setter.decodeSingularMessageField(fieldType: _StaffLocation.self, value: &_location)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _tone {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1)
      }
      if let v = _location {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 2)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _tone != other._tone {return false}
      if _location != other._location {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._tone = _tone
      clone._location = _location
      return clone
    }
  }

  private var _storage = _StorageClass()


  var tone: _Tone {
    get {return _storage._tone ?? _Tone()}
    set {_uniqueStorage()._tone = newValue}
  }
  public var hasTone: Bool {
    return _storage._tone != nil
  }
  public mutating func clearTone() {
    return _storage._tone = nil
  }

  var location: _StaffLocation {
    get {return _storage._location ?? _StaffLocation()}
    set {_uniqueStorage()._location = newValue}
  }
  public var hasLocation: Bool {
    return _storage._location != nil
  }
  public mutating func clearLocation() {
    return _storage._location = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: _Clef) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}
