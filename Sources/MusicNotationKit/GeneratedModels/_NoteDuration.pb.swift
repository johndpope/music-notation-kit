/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: _NoteDuration.proto
 *
 */

import Foundation
import SwiftProtobuf


struct _NoteDuration: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "_NoteDuration"}
  public var protoMessageName: String {return "NoteDuration"}
  public var protoPackageName: String {return "_"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "value", swift: "value"),
    2: .unique(proto: "dot_count", json: "dotCount", swift: "dotCount"),
    3: .unique(proto: "time_signature_value", json: "timeSignatureValue", swift: "timeSignatureValue"),
  ]


  enum Value: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case large // = 0
    case long // = 1
    case doubleWhole // = 2
    case whole // = 3
    case half // = 4
    case quarter // = 5
    case eighth // = 6
    case sixteenth // = 7
    case thirtySecond // = 8
    case sixtyFourth // = 9
    case oneTwentyEighth // = 10
    case twoFiftySixth // = 11
    case UNRECOGNIZED(Int)

    init() {
      self = .large
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .large
      case 1: self = .long
      case 2: self = .doubleWhole
      case 3: self = .whole
      case 4: self = .half
      case 5: self = .quarter
      case 6: self = .eighth
      case 7: self = .sixteenth
      case 8: self = .thirtySecond
      case 9: self = .sixtyFourth
      case 10: self = .oneTwentyEighth
      case 11: self = .twoFiftySixth
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    init?(name: String) {
      switch name {
      case "large": self = .large
      case "long": self = .long
      case "doubleWhole": self = .doubleWhole
      case "whole": self = .whole
      case "half": self = .half
      case "quarter": self = .quarter
      case "eighth": self = .eighth
      case "sixteenth": self = .sixteenth
      case "thirtySecond": self = .thirtySecond
      case "sixtyFourth": self = .sixtyFourth
      case "oneTwentyEighth": self = .oneTwentyEighth
      case "twoFiftySixth": self = .twoFiftySixth
      default: return nil
      }
    }

    init?(jsonName: String) {
      switch jsonName {
      case "LARGE": self = .large
      case "LONG": self = .long
      case "DOUBLE_WHOLE": self = .doubleWhole
      case "WHOLE": self = .whole
      case "HALF": self = .half
      case "QUARTER": self = .quarter
      case "EIGHTH": self = .eighth
      case "SIXTEENTH": self = .sixteenth
      case "THIRTY_SECOND": self = .thirtySecond
      case "SIXTY_FOURTH": self = .sixtyFourth
      case "ONE_TWENTY_EIGHTH": self = .oneTwentyEighth
      case "TWO_FIFTY_SIXTH": self = .twoFiftySixth
      default: return nil
      }
    }

    init?(protoName: String) {
      switch protoName {
      case "LARGE": self = .large
      case "LONG": self = .long
      case "DOUBLE_WHOLE": self = .doubleWhole
      case "WHOLE": self = .whole
      case "HALF": self = .half
      case "QUARTER": self = .quarter
      case "EIGHTH": self = .eighth
      case "SIXTEENTH": self = .sixteenth
      case "THIRTY_SECOND": self = .thirtySecond
      case "SIXTY_FOURTH": self = .sixtyFourth
      case "ONE_TWENTY_EIGHTH": self = .oneTwentyEighth
      case "TWO_FIFTY_SIXTH": self = .twoFiftySixth
      default: return nil
      }
    }

    var rawValue: Int {
      get {
        switch self {
        case .large: return 0
        case .long: return 1
        case .doubleWhole: return 2
        case .whole: return 3
        case .half: return 4
        case .quarter: return 5
        case .eighth: return 6
        case .sixteenth: return 7
        case .thirtySecond: return 8
        case .sixtyFourth: return 9
        case .oneTwentyEighth: return 10
        case .twoFiftySixth: return 11
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    var json: String {
      get {
        switch self {
        case .large: return "\"LARGE\""
        case .long: return "\"LONG\""
        case .doubleWhole: return "\"DOUBLE_WHOLE\""
        case .whole: return "\"WHOLE\""
        case .half: return "\"HALF\""
        case .quarter: return "\"QUARTER\""
        case .eighth: return "\"EIGHTH\""
        case .sixteenth: return "\"SIXTEENTH\""
        case .thirtySecond: return "\"THIRTY_SECOND\""
        case .sixtyFourth: return "\"SIXTY_FOURTH\""
        case .oneTwentyEighth: return "\"ONE_TWENTY_EIGHTH\""
        case .twoFiftySixth: return "\"TWO_FIFTY_SIXTH\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    var hashValue: Int { return rawValue }

    var debugDescription: String {
      get {
        switch self {
        case .large: return ".large"
        case .long: return ".long"
        case .doubleWhole: return ".doubleWhole"
        case .whole: return ".whole"
        case .half: return ".half"
        case .quarter: return ".quarter"
        case .eighth: return ".eighth"
        case .sixteenth: return ".sixteenth"
        case .thirtySecond: return ".thirtySecond"
        case .sixtyFourth: return ".sixtyFourth"
        case .oneTwentyEighth: return ".oneTwentyEighth"
        case .twoFiftySixth: return ".twoFiftySixth"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  ///   All enums fall in the same scope of the message. The same applies
  ///   to the global scope. Added TS_ preffix to avoid collissions with
  ///   Value enum.
  enum TimeSignatureValue: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case tsWhole // = 0
    case tsHalf // = 1
    case tsQuarter // = 2
    case tsEighth // = 3
    case tsSixteenth // = 4
    case tsThirtySecond // = 5
    case tsSixtyFourth // = 6
    case tsOneTwentyEighth // = 7
    case UNRECOGNIZED(Int)

    init() {
      self = .tsWhole
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .tsWhole
      case 1: self = .tsHalf
      case 2: self = .tsQuarter
      case 3: self = .tsEighth
      case 4: self = .tsSixteenth
      case 5: self = .tsThirtySecond
      case 6: self = .tsSixtyFourth
      case 7: self = .tsOneTwentyEighth
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    init?(name: String) {
      switch name {
      case "tsWhole": self = .tsWhole
      case "tsHalf": self = .tsHalf
      case "tsQuarter": self = .tsQuarter
      case "tsEighth": self = .tsEighth
      case "tsSixteenth": self = .tsSixteenth
      case "tsThirtySecond": self = .tsThirtySecond
      case "tsSixtyFourth": self = .tsSixtyFourth
      case "tsOneTwentyEighth": self = .tsOneTwentyEighth
      default: return nil
      }
    }

    init?(jsonName: String) {
      switch jsonName {
      case "TS_WHOLE": self = .tsWhole
      case "TS_HALF": self = .tsHalf
      case "TS_QUARTER": self = .tsQuarter
      case "TS_EIGHTH": self = .tsEighth
      case "TS_SIXTEENTH": self = .tsSixteenth
      case "TS_THIRTY_SECOND": self = .tsThirtySecond
      case "TS_SIXTY_FOURTH": self = .tsSixtyFourth
      case "TS_ONE_TWENTY_EIGHTH": self = .tsOneTwentyEighth
      default: return nil
      }
    }

    init?(protoName: String) {
      switch protoName {
      case "TS_WHOLE": self = .tsWhole
      case "TS_HALF": self = .tsHalf
      case "TS_QUARTER": self = .tsQuarter
      case "TS_EIGHTH": self = .tsEighth
      case "TS_SIXTEENTH": self = .tsSixteenth
      case "TS_THIRTY_SECOND": self = .tsThirtySecond
      case "TS_SIXTY_FOURTH": self = .tsSixtyFourth
      case "TS_ONE_TWENTY_EIGHTH": self = .tsOneTwentyEighth
      default: return nil
      }
    }

    var rawValue: Int {
      get {
        switch self {
        case .tsWhole: return 0
        case .tsHalf: return 1
        case .tsQuarter: return 2
        case .tsEighth: return 3
        case .tsSixteenth: return 4
        case .tsThirtySecond: return 5
        case .tsSixtyFourth: return 6
        case .tsOneTwentyEighth: return 7
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    var json: String {
      get {
        switch self {
        case .tsWhole: return "\"TS_WHOLE\""
        case .tsHalf: return "\"TS_HALF\""
        case .tsQuarter: return "\"TS_QUARTER\""
        case .tsEighth: return "\"TS_EIGHTH\""
        case .tsSixteenth: return "\"TS_SIXTEENTH\""
        case .tsThirtySecond: return "\"TS_THIRTY_SECOND\""
        case .tsSixtyFourth: return "\"TS_SIXTY_FOURTH\""
        case .tsOneTwentyEighth: return "\"TS_ONE_TWENTY_EIGHTH\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    var hashValue: Int { return rawValue }

    var debugDescription: String {
      get {
        switch self {
        case .tsWhole: return ".tsWhole"
        case .tsHalf: return ".tsHalf"
        case .tsQuarter: return ".tsQuarter"
        case .tsEighth: return ".tsEighth"
        case .tsSixteenth: return ".tsSixteenth"
        case .tsThirtySecond: return ".tsThirtySecond"
        case .tsSixtyFourth: return ".tsSixtyFourth"
        case .tsOneTwentyEighth: return ".tsOneTwentyEighth"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  var value: _NoteDuration.Value = _NoteDuration.Value.large

  var dotCount: Int64 = 0

  var timeSignatureValue: _NoteDuration.TimeSignatureValue = _NoteDuration.TimeSignatureValue.tsWhole

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: _NoteDuration.Value.self, value: &value)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &dotCount)
    case 3: try setter.decodeSingularField(fieldType: _NoteDuration.TimeSignatureValue.self, value: &timeSignatureValue)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if value != _NoteDuration.Value.large {
      try visitor.visitSingularField(fieldType: _NoteDuration.Value.self, value: value, protoFieldNumber: 1)
    }
    if dotCount != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: dotCount, protoFieldNumber: 2)
    }
    if timeSignatureValue != _NoteDuration.TimeSignatureValue.tsWhole {
      try visitor.visitSingularField(fieldType: _NoteDuration.TimeSignatureValue.self, value: timeSignatureValue, protoFieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: _NoteDuration) -> Bool {
    if value != other.value {return false}
    if dotCount != other.dotCount {return false}
    if timeSignatureValue != other.timeSignatureValue {return false}
    return true
  }
}
