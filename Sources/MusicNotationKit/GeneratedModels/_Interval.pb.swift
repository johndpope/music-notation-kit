/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: _Interval.proto
 *
 */

import Foundation
import SwiftProtobuf


struct _Interval: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "_Interval"}
  public var protoMessageName: String {return "Interval"}
  public var protoPackageName: String {return "_"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "quality", swift: "quality"),
    2: .same(proto: "number", swift: "number"),
  ]


  enum IntervalQuality: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case perfect // = 0
    case minor // = 1
    case major // = 2
    case diminished // = 3
    case augmented // = 4
    case doublyDiminished // = 5
    case doublyAugmented // = 6
    case UNRECOGNIZED(Int)

    init() {
      self = .perfect
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .perfect
      case 1: self = .minor
      case 2: self = .major
      case 3: self = .diminished
      case 4: self = .augmented
      case 5: self = .doublyDiminished
      case 6: self = .doublyAugmented
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    init?(name: String) {
      switch name {
      case "perfect": self = .perfect
      case "minor": self = .minor
      case "major": self = .major
      case "diminished": self = .diminished
      case "augmented": self = .augmented
      case "doublyDiminished": self = .doublyDiminished
      case "doublyAugmented": self = .doublyAugmented
      default: return nil
      }
    }

    init?(jsonName: String) {
      switch jsonName {
      case "PERFECT": self = .perfect
      case "MINOR": self = .minor
      case "MAJOR": self = .major
      case "DIMINISHED": self = .diminished
      case "AUGMENTED": self = .augmented
      case "DOUBLY_DIMINISHED": self = .doublyDiminished
      case "DOUBLY_AUGMENTED": self = .doublyAugmented
      default: return nil
      }
    }

    init?(protoName: String) {
      switch protoName {
      case "PERFECT": self = .perfect
      case "MINOR": self = .minor
      case "MAJOR": self = .major
      case "DIMINISHED": self = .diminished
      case "AUGMENTED": self = .augmented
      case "DOUBLY_DIMINISHED": self = .doublyDiminished
      case "DOUBLY_AUGMENTED": self = .doublyAugmented
      default: return nil
      }
    }

    var rawValue: Int {
      get {
        switch self {
        case .perfect: return 0
        case .minor: return 1
        case .major: return 2
        case .diminished: return 3
        case .augmented: return 4
        case .doublyDiminished: return 5
        case .doublyAugmented: return 6
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    var json: String {
      get {
        switch self {
        case .perfect: return "\"PERFECT\""
        case .minor: return "\"MINOR\""
        case .major: return "\"MAJOR\""
        case .diminished: return "\"DIMINISHED\""
        case .augmented: return "\"AUGMENTED\""
        case .doublyDiminished: return "\"DOUBLY_DIMINISHED\""
        case .doublyAugmented: return "\"DOUBLY_AUGMENTED\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    var hashValue: Int { return rawValue }

    var debugDescription: String {
      get {
        switch self {
        case .perfect: return ".perfect"
        case .minor: return ".minor"
        case .major: return ".major"
        case .diminished: return ".diminished"
        case .augmented: return ".augmented"
        case .doublyDiminished: return ".doublyDiminished"
        case .doublyAugmented: return ".doublyAugmented"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  var quality: _Interval.IntervalQuality = _Interval.IntervalQuality.perfect

  var number: Int64 = 0

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: _Interval.IntervalQuality.self, value: &quality)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &number)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if quality != _Interval.IntervalQuality.perfect {
      try visitor.visitSingularField(fieldType: _Interval.IntervalQuality.self, value: quality, protoFieldNumber: 1)
    }
    if number != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: number, protoFieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: _Interval) -> Bool {
    if quality != other.quality {return false}
    if number != other.number {return false}
    return true
  }
}
