/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: _Tone.proto
 *
 */

import Foundation
import SwiftProtobuf


struct _Tone: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "_Tone"}
  public var protoMessageName: String {return "Tone"}
  public var protoPackageName: String {return "_"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "note_letter", json: "noteLetter", swift: "noteLetter"),
    2: .same(proto: "accidental", swift: "accidental"),
    3: .same(proto: "octave", swift: "octave"),
  ]


  var noteLetter: _NoteLetter = _NoteLetter.undefNote

  var accidental: _Accidental = _Accidental.undefAccidental

  var octave: _Octave = _Octave.0

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: _NoteLetter.self, value: &noteLetter)
    case 2: try setter.decodeSingularField(fieldType: _Accidental.self, value: &accidental)
    case 3: try setter.decodeSingularField(fieldType: _Octave.self, value: &octave)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if noteLetter != _NoteLetter.undefNote {
      try visitor.visitSingularField(fieldType: _NoteLetter.self, value: noteLetter, protoFieldNumber: 1)
    }
    if accidental != _Accidental.undefAccidental {
      try visitor.visitSingularField(fieldType: _Accidental.self, value: accidental, protoFieldNumber: 2)
    }
    if octave != _Octave.0 {
      try visitor.visitSingularField(fieldType: _Octave.self, value: octave, protoFieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: _Tone) -> Bool {
    if noteLetter != other.noteLetter {return false}
    if accidental != other.accidental {return false}
    if octave != other.octave {return false}
    return true
  }
}
