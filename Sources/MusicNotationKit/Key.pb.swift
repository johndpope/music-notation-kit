/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: Key.proto
 *
 */

import Foundation
import SwiftProtobuf


struct MusicNotation_Key: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "MusicNotation_Key"}
  public var protoMessageName: String {return "Key"}
  public var protoPackageName: String {return "MusicNotation"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "type", swift: "type"),
    2: .unique(proto: "note_letter", json: "noteLetter", swift: "noteLetter"),
    3: .same(proto: "accidental", swift: "accidental"),
  ]


  var type: MusicNotation_KeyType = MusicNotation_KeyType.undefKey

  var noteLetter: MusicNotation_NoteLetter = MusicNotation_NoteLetter.undefNote

  var accidental: MusicNotation_Accidental = MusicNotation_Accidental.undefAccidental

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: MusicNotation_KeyType.self, value: &type)
    case 2: try setter.decodeSingularField(fieldType: MusicNotation_NoteLetter.self, value: &noteLetter)
    case 3: try setter.decodeSingularField(fieldType: MusicNotation_Accidental.self, value: &accidental)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if type != MusicNotation_KeyType.undefKey {
      try visitor.visitSingularField(fieldType: MusicNotation_KeyType.self, value: type, protoFieldNumber: 1)
    }
    if noteLetter != MusicNotation_NoteLetter.undefNote {
      try visitor.visitSingularField(fieldType: MusicNotation_NoteLetter.self, value: noteLetter, protoFieldNumber: 2)
    }
    if accidental != MusicNotation_Accidental.undefAccidental {
      try visitor.visitSingularField(fieldType: MusicNotation_Accidental.self, value: accidental, protoFieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: MusicNotation_Key) -> Bool {
    if type != other.type {return false}
    if noteLetter != other.noteLetter {return false}
    if accidental != other.accidental {return false}
    return true
  }
}
